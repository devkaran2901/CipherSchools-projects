import React, { useState, useEffect } from 'react';

export default function WeatherApp() {
  const OPENWEATHER_API_KEY = '5884a1828943927cf6cd4aadffb0184c'; 

  const [city, setCity] = useState('London');
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [inputCity, setInputCity] = useState('London');

  const [geminiResponse, setGeminiResponse] = useState('');
  const [geminiLoading, setGeminiLoading] = useState(false);
  const [geminiError, setGeminiError] = useState(null);

  const fetchWeather = async (cityName) => {
    if (!cityName) return;
    if (!OPENWEATHER_API_KEY || OPENWEATHER_API_KEY === '5884a1828943927cf6cd4aadffb0184c') {
        setError('Please add your OpenWeather API key to the code.');
        return;
    }

    setLoading(true);
    setError(null);
    setWeatherData(null);
    setGeminiResponse('');

    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${OPENWEATHER_API_KEY}&units=metric`
      );

      if (!response.ok) {
        throw new Error('City not found. Please try again.');
      }

      const data = await response.json();
      setWeatherData(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
  
  const fetchGeminiSuggestion = async (prompt) => {
    setGeminiLoading(true);
    setGeminiError(null);
    setGeminiResponse('');

    try {
        const payload = {
            contents: [{ role: "user", parts: [{ text: prompt }] }],
        };
        const apiKey = ""
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
        
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            throw new Error(`Gemini API request failed with status ${response.status}`);
        }

        const result = await response.json();
        
        if (result.candidates && result.candidates.length > 0 &&
            result.candidates[0].content && result.candidates[0].content.parts &&
            result.candidates[0].content.parts.length > 0) {
            const text = result.candidates[0].content.parts[0].text;
            setGeminiResponse(text);
        } else {
            throw new Error("Invalid response structure from Gemini API.");
        }

    } catch (err) {
        setGeminiError(err.message);
    } finally {
        setGeminiLoading(false);
    }
  };
  
  const handleGetOutfit = () => {
    if (!weatherData) return;
    const prompt = `Based on the weather in ${weatherData.name}, which is ${Math.round(weatherData.main.temp)}°C with ${weatherData.weather[0].description}, what's a suitable outfit to wear today? Keep it short and friendly.`;
    fetchGeminiSuggestion(prompt);
  };
  
  const handleGetActivities = () => {
    if (!weatherData) return;
    const prompt = `The weather in ${weatherData.name} is ${Math.round(weatherData.main.temp)}°C with ${weatherData.weather[0].description}. Suggest 3 fun activities (a mix of indoor and outdoor if appropriate) for today. Format the response as a simple list.`;
    fetchGeminiSuggestion(prompt);
  };

  const handleGetSummary = () => {
    if (!weatherData) return;
    const prompt = `Create a short, friendly, and conversational weather summary for a user. Here's the data for ${weatherData.name}: Temperature is ${Math.round(weatherData.main.temp)}°C, feels like ${Math.round(weatherData.main.feels_like)}°C, humidity is ${weatherData.main.humidity}%, and the sky has ${weatherData.weather[0].description}.`;
    fetchGeminiSuggestion(prompt);
  };

  useEffect(() => {
    fetchWeather(city);
  }, [city]);

  const handleSubmit = (e) => {
    e.preventDefault();
    setCity(inputCity);
  };
  
  const getWeatherIconUrl = (iconCode) => `https://openweathermap.org/img/wn/${iconCode}@2x.png`;

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center font-sans p-4">
      <div className="w-full max-w-md p-6 md:p-8 space-y-6 bg-white rounded-xl shadow-lg">
        <h1 className="text-3xl font-bold text-center text-gray-800">Live Weather App</h1>
        
        <form onSubmit={handleSubmit} className="flex space-x-2">
          <input
            type="text"
            value={inputCity}
            onChange={(e) => setInputCity(e.target.value)}
            placeholder="Enter city name..."
            className="flex-grow p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            type="submit"
            disabled={loading}
            className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors disabled:bg-blue-300"
          >
            {loading ? '...' : 'Get Weather'}
          </button>
        </form>

        {loading && <p className="text-center text-gray-500">Loading weather data...</p>}
        {error && <div className="p-4 text-center text-red-700 bg-red-100 rounded-lg"><p>{error}</p></div>}

        {weatherData && (
          <div className="flex flex-col items-center space-y-4 p-6 bg-blue-50 rounded-lg border border-blue-200">
            <h2 className="text-2xl font-semibold text-gray-700">{weatherData.name}, {weatherData.sys.country}</h2>
            <div className="flex items-center">
                <img src={getWeatherIconUrl(weatherData.weather[0].icon)} alt={weatherData.weather[0].description} className="w-20 h-20" />
                <p className="text-5xl font-bold text-gray-800">{Math.round(weatherData.main.temp)}°C</p>
            </div>
            <p className="text-lg text-gray-600 capitalize">{weatherData.weather[0].description}</p>
            <div className="w-full grid grid-cols-2 gap-4 text-center pt-4 border-t mt-4">
                <div><p className="font-semibold text-gray-700">Humidity</p><p className="text-gray-600">{weatherData.main.humidity}%</p></div>
                <div><p className="font-semibold text-gray-700">Wind Speed</p><p className="text-gray-600">{weatherData.wind.speed} m/s</p></div>
            </div>
            
            <div className="w-full flex flex-col sm:flex-row gap-2 pt-4 border-t mt-4">
                <button onClick={handleGetOutfit} disabled={geminiLoading} className="flex-1 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition disabled:bg-purple-300">✨ Get Outfit Suggestion</button>
                <button onClick={handleGetActivities} disabled={geminiLoading} className="flex-1 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition disabled:bg-green-300">✨ Suggest Activities</button>
                <button onClick={handleGetSummary} disabled={geminiLoading} className="flex-1 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition disabled:bg-orange-300">✨ Summarize</button>
            </div>
          </div>
        )}

        {geminiLoading && <p className="text-center text-gray-500">✨ Gemini is thinking...</p>}
        {geminiError && <div className="p-4 mt-4 text-center text-red-700 bg-red-100 rounded-lg"><p>Gemini Error: {geminiError}</p></div>}
        {geminiResponse && (
            <div className="mt-4 p-4 bg-gray-50 rounded-lg border">
                <h3 className="text-lg font-semibold text-gray-800 mb-2">✨ AI Suggestion:</h3>
                <p className="text-gray-700 whitespace-pre-wrap">{geminiResponse}</p>
            </div>
        )}
      </div>
    </div>
  );
}
